#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  double sumar(double a, double b)')
    print('  double restar(double a, double b)')
    print('  double multiplicar(double a, double b)')
    print('  double dividir(double a, double b)')
    print('  double seno(double a)')
    print('  double coseno(double a)')
    print('  double tangente(double a)')
    print('  double arcoseno(double a)')
    print('  double arcocoseno(double a)')
    print('  double arcotangente(double a)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'sumar':
    if len(args) != 2:
        print('sumar requires 2 args')
        sys.exit(1)
    pp.pprint(client.sumar(eval(args[0]), eval(args[1]),))

elif cmd == 'restar':
    if len(args) != 2:
        print('restar requires 2 args')
        sys.exit(1)
    pp.pprint(client.restar(eval(args[0]), eval(args[1]),))

elif cmd == 'multiplicar':
    if len(args) != 2:
        print('multiplicar requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiplicar(eval(args[0]), eval(args[1]),))

elif cmd == 'dividir':
    if len(args) != 2:
        print('dividir requires 2 args')
        sys.exit(1)
    pp.pprint(client.dividir(eval(args[0]), eval(args[1]),))

elif cmd == 'seno':
    if len(args) != 1:
        print('seno requires 1 args')
        sys.exit(1)
    pp.pprint(client.seno(eval(args[0]),))

elif cmd == 'coseno':
    if len(args) != 1:
        print('coseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.coseno(eval(args[0]),))

elif cmd == 'tangente':
    if len(args) != 1:
        print('tangente requires 1 args')
        sys.exit(1)
    pp.pprint(client.tangente(eval(args[0]),))

elif cmd == 'arcoseno':
    if len(args) != 1:
        print('arcoseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.arcoseno(eval(args[0]),))

elif cmd == 'arcocoseno':
    if len(args) != 1:
        print('arcocoseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.arcocoseno(eval(args[0]),))

elif cmd == 'arcotangente':
    if len(args) != 1:
        print('arcotangente requires 1 args')
        sys.exit(1)
    pp.pprint(client.arcotangente(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
